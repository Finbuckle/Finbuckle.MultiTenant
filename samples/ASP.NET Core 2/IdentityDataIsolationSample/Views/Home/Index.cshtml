@model TenantInfo

@{
    ViewData["Title"] = "Home Page";
}

@using Finbuckle.MultiTenant.AspNetCore

<div class="row">
    <div class="col">
        @if (Model != null)
        {
            <h3 class="mt-4">TenantInfo Values</h3>

            <table class="table">
                <thead>
                    <tr>
                        <th style="width:25%">Property</th>
                        <th>Value</th>
                    </tr>
                </thead>

                <tbody>
                    <tr>
                        <td>@nameof(Model.Id)</td>
                        <td>@Model.Id</td>
                    </tr>
                    <tr>
                        <td>@nameof(Model.Identifier)</td>
                        <td>@Model.Identifier</td>
                    </tr>
                    <tr>
                        <td>@nameof(Model.Name)</td>
                        <td>@Model.Name</td>
                    </tr>
                    <tr>
                        <td>@nameof(Model.ConnectionString)</td>
                        <td>@Model.ConnectionString</td>
                    </tr>
                </tbody>
            
            </table>
        }
        else
        {
            <div class="jumbotron">
            <h1 class="display-4">Hello, world!</h1>
            <p class="lead">This sample highlights <a href="https://www.finbuckle.com/MultiTenant/Docs/Identity">per-tenant data with ASP.NET Core Identity</a>.</p>
            <hr class="my-4">
            <p>Note: this sample uses Bootstrap 4, but in ASP.NET Core 2.1 Identity only supports Bootstrap 3 by default. Certain things like buttons may not render ideally.</p>
            <p>
                Select a tenant from the navbar to change the current tenant. You can register, login, logout,
                and manage account via the default Identity UI within each tenant.
            </p>
            <p>
                ASP.NET Core Identity uses a Razor page library to supply its UI. In this example the routing for
                the Razor library is tweaked to use out tenant route parameter we use with the route strategy.
            </p>
            <p>
                The Finbuckle and MegaCorp tenants share a common SQLite database, but Initech has its own separate datasebase.
                Both of these databases will be created the first time the app runs. If using the dotnet-ef commad line tool
                modify the Data/DesignTimeFactory.cs file accordingly so that each database gets updated.
            </p>
            <p>
                The use of per-tenant cookie options in this sample is similar to that of the 
                <a href="https://github.com/Finbuckle/Finbuckle.MultiTenant/tree/master/samples/AuthenticationOptionsSample">AuthenticationOptionsSample</a>.
                ASP.NET Core Identity 2.2 overrides some of these values so as a workaround we use a <code>PostConfigure</code>.
                <a href="https://github.com/aspnet/Identity/issues/2019">This behavior will be fixed in ASP.NET Core 3.0</a>.
            </p>
            <p>
                Note: This demo requires external configuration for the OpenID Connect,
                Google, and Facebook logins to work correctly. See the comments in `Startup.cs` for more details. 
            </p>
            <p>
                See the complete configuration in <code>Startup.cs</code>.
                Some of the highlights are shown below:
            </p>
            <pre><code>// Setup Identity as usual. Note the MultiTenant User and Role type parameters.
services.AddDefaultIdentity<IdentityUser>()
        .AddEntityFrameworkStores<ApplicationDbContext>();

// Configure MVC:
// We modify the Identity razor settings to use our tenant route parameter.
// This is needed only because we use the RouteStrategy and
// aren't using the default MVC routes.
// If using ASP.NET Core 2.2 there is a bug with endpoint routing so make sure to disable it (ASP.NET Core 3.0+ fixes this issue).
services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1)
    .AddRazorPagesOptions(options =>
    {
        // Since we are using the route multitenant strategy we must add the
        // route parameter to the Pages conventions used by Identity.
        options.Conventions.AddAreaFolderRouteModelConvention("Identity", "/Account", model =>
        {
            foreach (var selector in model.Selectors)
            {
                selector.AttributeRouteModel.Template =
                    AttributeRouteModel.CombineTemplates("{__tenant__}", selector.AttributeRouteModel.Template);
            }
        });
    });

services.AddMultiTenant<TenantInfo>()... // Similar to setup in the AuthenticationOptionsSample.

// Required due to a bug in ASP.NET Core Identity.
// (https://github.com/aspnet/Identity/issues/2019)
services.PostConfigure<CookieAuthenticationOptions>(IdentityConstants.ApplicationScheme, options =>
{
// This will result in a path of /_tenant_/Identity/Account/Login
options.LoginPath = $"{options.Cookie.Path}{options.LoginPath}";
options.LogoutPath = $"{options.Cookie.Path}{options.LogoutPath}";
});</code></pre>
            <p>Click the links on the navbar to it in action!</p>
            </div>
        }
    </div>
</div>