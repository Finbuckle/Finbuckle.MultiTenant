@model TenantInfo

@{
    ViewData["Title"] = "Delegate Strategy Sample";
}

@if(Model != null)
{
    <h3 class="mt-4">TenantInfo Values</h3>

    <table class="table">
        <thead>
            <tr>
                <th style="width:25%">Property</th>
                <th>Value</th>
            </tr>
        </thead>

        <tbody>
            <tr>
                <td>@nameof(Model.Id)</td>
                <td>@Model.Id</td>
            </tr>
            <tr>
                <td>@nameof(Model.Identifier)</td>
                <td>@Model.Identifier</td>
            </tr>
            <tr>
                <td>@nameof(Model.Name)</td>
                <td>@Model.Name</td>
            </tr>
            <tr>
                <td>@nameof(Model.ConnectionString)</td>
                <td>@Model.ConnectionString</td>
            </tr>
        </tbody>
    
    </table>
}
else
{
    <div class="jumbotron">
        <h1 class="display-4">Hello, world!</h1>
        <p class="lead">The sample highlights the <a href="https://www.finbuckle.com/MultiTenant/Docs/Strategies#delegate-strategy">delegate strategy</a>.</p>
        <hr class="my-4">
        <p>The delegate strategy accepts a <code>Func&lt;object, Task&lt;string&gt;&gt;</code> to define its functionality.
        This makes it a good strategy to use for testing purposes. In this sample we configure it to use the request query parameter "tenant"
        as the tenant identifier:
        <pre><code>services.AddMultiTenant().
    WithInMemoryStore(...).
    WithDelegateStrategy(context =&gt; 
    {
        ((HttpContext)context).Request.Query.TryGetValue("tenant", out StringValues tenantId);
        return Task.FromResult(tenantId.ToString());
    });
        </code></pre>
        <p>Click the links in the top right to see the strategy in action!</p>
    </div>
}