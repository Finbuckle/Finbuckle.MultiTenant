@model SampleTenantInfo

@{
    ViewData["Title"] = "Home Page";
}


<div class="row">
    <div class="col">
        @if (Model != null)
        {
            <a asp-controller="Home" asp-action="ReturnChallenge" class="nav-link">Authentication Challenge</a>
            <a asp-controller="Home" asp-action="ReturnForbid" class="nav-link">Authentication Forbid</a>

            <h3 class="mt-4">TenantInfo Values</h3>

            <table class="table">
                <thead>
                    <tr>
                        <th style="width:25%">Property</th>
                        <th>Value</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach(var prop in @Model.GetType().GetProperties())
                    {
                        <tr>
                            <td>@prop.Name</td>
                            <td>@prop.GetValue(@Model)</td>
                        </tr>   
                    }
                </tbody>
            
            </table>
        }
        else
        {
            <div class="jumbotron">
            <h1 class="display-4">Hello, world!</h1>
            <p class="lead">This sample highlights <a href="https://www.finbuckle.com/MultiTenant/Docs/Identity">per-tenant data with ASP.NET Core Identity</a>.</p>
            <hr class="my-4">
            <p>
                Select a tenant from the navbar to change the current tenant. You can register, login, logout,
                and manage account via the default Identity UI within each tenant. Note that even with a shared
                database a user can register with each tenant and will maintain separate login sessions. Finbuckle.MultiTenant
                makes it appear like separate databases to Identity.
            </p>
            <p>
                ASP.NET Core Identity uses a Razor page library to supply its UI. In this example the routing for
                the Razor library is tweaked to use out tenant route parameter we use with the route strategy.
                In addition, a LinkGenerator wrapper is used to ensure the __tenant__ route parameter is passed
                to URLs generated in Identity pages.
            </p>
            <p>
                The Finbuckle and MegaCorp tenants share a common SQLite database, but Initech has its own separate datasebase.
                Both of these databases will be created the first time the app runs. If using the dotnet-ef commad line tool
                modify the Data/DesignTimeFactory.cs file accordingly so that each database gets updated.
            </p>
            <p>
                The ApplicationDbContect derives from MultiTenantIdentityDbContext, and it specifies the User ID value be generated on add.
            </p>
            <p>
                The use of per-tenant cookie options in this sample is similar to that of the 
                <a href="https://github.com/Finbuckle/Finbuckle.MultiTenant/tree/master/samples/AuthenticationOptionsSample">AuthenticationOptionsSample</a>.
            </p>
            <p>
                See the complete configuration in <code>Startup.cs</code>.
                Some of the highlights are shown below:
            </p>
            <pre><code>// Setup Identity as usual. Note the MultiTenant User and Role type parameters.
services.AddDefaultIdentity<IdentityUser>()
        .AddEntityFrameworkStores<ApplicationDbContext>();

// Configure MVC:
// We modify the Identity razor settings to use our tenant route parameter.
// This is needed only because we use the RouteStrategy and
// aren't using the default Identity routes.
services.AddControllersWithViews()
    .AddRazorPagesOptions(options =>
    {
        // Since we are using the route multitenant strategy we must add the
        // route parameter to the Pages conventions used by Identity.
        options.Conventions.AddAreaFolderRouteModelConvention("Identity", "/Account", model =>
        {
            foreach (var selector in model.Selectors)
            {
                selector.AttributeRouteModel.Template =
                        AttributeRouteModel.CombineTemplates(
                            "{__tenant__}",
                            selector.AttributeRouteModel.Template);
            }
        });
    });

// Wrap the default link generator with one that will preserve the tenant route parameter for links.
services.DecorateService<LinkGenerator, AmbientValueLinkGenerator>(new List<string> { "__tenant__" });

services.AddMultiTenant&lt;TenantInfo&gt;()... // Similar to setup in the AuthenticationOptionsSample.
</code></pre>
            <p>Click the links on the navbar to it in action!</p>
            </div>
        }
    </div>
</div>